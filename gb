#!/usr/bin/env ruby
require 'io/console'
require 'pry'
begin
  require 'colorize'
rescue LoadError
  class String
    def colorize(_ = nil); self; end
  end
end

play_sounds = true

branches = `git branch  --sort=-committerdate | head -n 13 | sort`.split("\n")
branch_count = branches.count

current_branch = `git branch`.split("\n").select { |s| s[/\*/] }.first[2..-1]

current_position = branches.index { |s| s[current_branch] }

branches.map! { |o| o[2..-1] }

# Mark current branch in blue
branches[current_position] = \
  branches[current_position].colorize(:blue)

begin_position = current_position

def draw(current_position, branches, begin_position)
  system('clear')
  branches.each_with_index do |tail, index|
    if index.eql?(current_position) && begin_position == current_position
      puts(('* ' + tail).colorize(:blue))
    elsif index.eql?(current_position) && begin_position != current_position
      puts(('* ' + tail).colorize(:green))
    else
      puts '  ' + tail
    end
  end

  puts 'git branch ' + branches[begin_position].colorize(:blue) + \
       ' â†’ '.colorize(:red) + branches[current_position].colorize(:green)
  puts "\n"
  commit_message = `git show -s --format=%B #{branches[current_position].dup.uncolorize} | cat`
  puts commit_message.colorize(:black).on_yellow
end

fork { `afplay /usr/local/bin/woor2.aif` } if play_sounds
draw(current_position, branches, begin_position)
until (input = STDIN.getch) == "\r"
  case input
  when 'j'
    fork { `afplay /usr/local/bin/bling1nice.aif` } if play_sounds
    current_position < branch_count - 1 ? current_position += 1 : nil
  when 'k'
    fork { `afplay /usr/local/bin/chipchip.aif` } if play_sounds
    current_position > 0 ? current_position -= 1 : nil
  when 'q'
    exit(0)
  end
  draw(current_position, branches, begin_position)
end

fork { `afplay /usr/local/bin/wermenrenre.aif` } if play_sounds

puts `git checkout #{branches[current_position].uncolorize}`
